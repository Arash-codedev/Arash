#pragma once
#include <iostream>
#include <vector>
#include <set>
#include <string>
#include <stdexcept>
#include <filesystem>
#include <assert.h>


using std::cout;
using std::endl;
using std::filesystem::path;
using std::literals::string_literals::operator""s;
using std::runtime_error;
using std::set;
using std::string;
using std::to_string;
using std::stringstream;
using std::vector;

namespace fs = std::filesystem;

template<class T>
bool is_in(const T & t,const vector<T>& list)
{
    for(const string& item:list)
        if(t==item)
            return true;
    return false;
}

template<class T>
void delete_vector_of_pointers(vector<T*> &v)
{
    for(T* p : v)
    {
        assert(p != nullptr);
        delete p;
    }
    v.clear();
}

template<class T>
void replicate_vector_of_pointers(const vector<T*> &original, vector<T*> &copy)
{
    for(T* p : original)
    {
        assert(p != nullptr);
        T* new_item = new T();
        *new_item = *p;
        copy.push_back(new_item);
    }
}

template<class T>
void replicate_pointers(const void * original, void * & copy)
{
    copy = (void *) new T();
    *((T*) copy) = *((T*) original);
}
